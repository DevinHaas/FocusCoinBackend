// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(auto()) @map("id") // Assuming your UUIDs are stored as strings
  username           String      @unique
  focuscoins         Int?
  subscription       UserSubscription
  profile_picture_url String
  session_settings    Json?
  email              String
  authUser           AuthUser   @relation("user_authUser", fields: [id], references: [id], onDelete: Cascade)
  UserHistory        UserHistory[]
}

enum UserSubscription {
  // Define your subscription enum values here
  // For example: FREE, BASIC, PREMIUM, etc.
}

model UserHistory {
  id         Int       @id @default(autoincrement())
  new_data   User?
  operation  String?
  changed_at DateTime? @default(now())
}

model AuthUser {
  id   String   @id
  user User     @relation("user_authUser", fields: [id], references: [id])
}

model Product {
  id             String      @id @default(auto()) @map("id")
  price_coins    BigInt      @db.Integer
  price_usd      BigInt      @db.Integer
  title          String
  description    String?
  reference_link String?
  published_at   DateTime    @map("published_at")
  expires_at     DateTime?
  amount         BigInt?
  image_urls     String[]?
  type           ProductType
  ProductHistory ProductHistory[]
}

enum ProductType {
  // Define your product type enum values here
  // For example: ELECTRONICS, CLOTHING, etc.
}

model ProductHistory {
  id        Int       @id @default(autoincrement())
  new_data  Product?
  operation String?
  changed_at DateTime? @default(now())
}

model UserProduct {
  bought_at  DateTime? // Assuming this should be a timestamp with time zone
  user_id    String
  product_id String
  user       AuthUser @relation("user_productUser", fields: [user_id], references: [id])
  product    Product  @relation("user_productProduct", fields: [product_id], references: [id])

  @@id([user_id, product_id])
}

model Tag {
  id   Int       @id @default(auto()) @map("id")
  tag  ProductTag
}

enum ProductTag {
  // Define your product tag enum values here
  // For example: ELECTRONICS, CLOTHING, etc.
}

model ProductTag {
  tag_id    Int
  product_id String
  tag       Tag @relation("product_tagTag", fields: [tag_id], references: [id])
  product   Product @relation("product_tagProduct", fields: [product_id], references: [id])

  @@id([tag_id, product_id])
}

model Participant {
  session_id BigInt      @id @default(auto()) @map("session_id")
  user_id    String
  doubled    Boolean
  state     ParticipantState
  session   FocusSession @relation("participant_session", fields: [session_id], references: [id])
  user      User         @relation("participant_user", fields: [user_id], references: [id])

  @@id([session_id, user_id])
}

enum ParticipantState {
  // Define your participant state enum values here
  // For example: ACTIVE, INACTIVE, etc.
}

model ParticipantHistory {
  id        Int       @id @default(autoincrement())
  new_data  Participant?
  operation String?
  changed_at DateTime? @default(now())
}

model Friendship {
  user_id  String
  friend_id String
  status   StatusFriendship
  user     AuthUser @relation("friendship_user", fields: [user_id], references: [id])
  friend   AuthUser @relation("friendship_friend", fields: [friend_id], references: [id])

  @@id([user_id, friend_id])
}

enum StatusFriendship {
  // Define your status friendship enum values here
  // For example: REQUESTED, ACCEPTED, DECLINED, etc.
}

model FriendshipHistory {
  id        Int       @id @default(autoincrement())
  new_data  Friendship?
  operation String?
  changed_at DateTime? @default(now())
}

model FocusSession {
  id             BigInt      @id @default(auto()) @map("id")
  session_settings Json
  reward         BigInt
  state          SessionState
  participants   Participant[]
}

enum SessionState {
  // Define your session state enum values here
  // For example: ACTIVE, COMPLETED, CANCELED, etc.
}

model FocusSessionHistory {
  id        Int       @id @default(autoincrement())
  new_data  FocusSession?
  operation String?
  changed_at DateTime? @default(now())
}

model Participant {
  session_id BigInt
  user_id    String
  doubled    Boolean
  state     ParticipantState
  focusSession FocusSession @relation("participant_session", fields: [session_id], references: [id])
  user        User         @relation("participant_user", fields: [user_id], references: [id])

  @@id([session_id, user_id])
}

enum ParticipantState {
  // Define your participant state enum values here
  // For example: ACTIVE, INACTIVE, etc.
}
